{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"luacsound luacsound is a simple Lua module for generating Csound files. If you are interested in algorithmic composing or simply tired of writing Csound scores \"by hand\", you might give this a try. luacsound enables you to write a Csound score as a Lua program, You can use Csound instruments as Lua functions and it outputs the result of the program as a standard .csd file (Csound's XML format). Installation Use LuaRocks as a package manager and install using luarocks --local install luacsound Omit the --local to perform a global install. Alternatively, a manual install can be accomplished by copying the luacsound directory (the one containing the init.lua file) where it can be found by require() , e.g. some directory in LUA_PATH . See the Lua reference manual for details. Usage The following example loads the module, creates a new piece of output, loads an instrument (expecting it to be defined in file sine.orc ) and uses the intrument for a few notes, using the standard parameters. Finally, the .csd file is printed that could be processed by csound . local csound = require 'luacsound' local csd = csound() local sine = csd:instr( 'sine' ) sine{ freq = 'f6', start = 0, dur = 1, vol = 2 } sine{ freq = 'f5', start = 1, dur = 1, vol = 2 } sine{ freq = 'f4', start = 0.5, dur = 1, vol = 2 } print( csd:output() ) For a complete description of the functionality see the manual . Contributing This is mostly a private fun project. However, pull requests are welcome. License Code is released under the MIT License .","title":"Home"},{"location":"#luacsound","text":"luacsound is a simple Lua module for generating Csound files. If you are interested in algorithmic composing or simply tired of writing Csound scores \"by hand\", you might give this a try. luacsound enables you to write a Csound score as a Lua program, You can use Csound instruments as Lua functions and it outputs the result of the program as a standard .csd file (Csound's XML format).","title":"luacsound"},{"location":"#installation","text":"Use LuaRocks as a package manager and install using luarocks --local install luacsound Omit the --local to perform a global install. Alternatively, a manual install can be accomplished by copying the luacsound directory (the one containing the init.lua file) where it can be found by require() , e.g. some directory in LUA_PATH . See the Lua reference manual for details.","title":"Installation"},{"location":"#usage","text":"The following example loads the module, creates a new piece of output, loads an instrument (expecting it to be defined in file sine.orc ) and uses the intrument for a few notes, using the standard parameters. Finally, the .csd file is printed that could be processed by csound . local csound = require 'luacsound' local csd = csound() local sine = csd:instr( 'sine' ) sine{ freq = 'f6', start = 0, dur = 1, vol = 2 } sine{ freq = 'f5', start = 1, dur = 1, vol = 2 } sine{ freq = 'f4', start = 0.5, dur = 1, vol = 2 } print( csd:output() ) For a complete description of the functionality see the manual .","title":"Usage"},{"location":"#contributing","text":"This is mostly a private fun project. However, pull requests are welcome.","title":"Contributing"},{"location":"#license","text":"Code is released under the MIT License .","title":"License"},{"location":"license/","text":"MIT License Copyright (c) 2016\u20132019 Matthias Kluwe Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright (c) 2016\u20132019 Matthias Kluwe Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"manual/","text":"Manual Loading the module The module is loaded with require 'luacsound' as usual. This returns a function that provides the functionality to generate a new Csound definition file (`.csd) including a new score. By calling this function multiple times, several scores can be generated \"in parallel\". Generating a new Csound definition file As said above, call the function provided by the module: local csound = require 'luacsound' local csd = csound() Of course, this can be accomplished in one line: local csd = require 'luacsound'() What you get is an object (called \"the Csd-object\" here) providing the functionality to load instruments an outputting the score. Instruments are loaded by the instr method and can be used to fill the score (see later), the output is generated by the output method. Loading instruments Instruments are loaded into the Csd-object by calling the instr method: local sine = csd:instr( 'sine' ) Calling instr loads the definition of the instrument from the .orc file with the given name, sine.orc in this example ( .orc is the extension Csound traditionally uses for instrument definitions). The method returns a function that can be used to fill the score of the Csd-object with notes. Instrument files Defining instruments is done one instrument per file, which is quite pratical for purposes of re-use. Starting the instument block with instr and ending it with endin is ommitted. Instead of writing instr 3 ; p3=duration of note k1 linen p4, p6, p3, p7 ; p4=amp a1 oscil k1, p5, 1 ; p5=freq out a1 ; p6=attack time endin ; p7=release time and documenting the parameters, named parameters are used. Instruments are numbered automatically when loaded. The example above becomes k1 linen $amp, $attack, $dur, $release a1 oscil k1, $freq, 1 out a1 Using instruments Using loaded instruments is easy. Simply call the associated functions, providing suitable parameters: sine{ freq = 'f6', start = 0, dur = 1, vol = 2 } sine{ freq = 'f5', start = 1, dur = 1, vol = 2 } sine{ freq = 'f4', start = 0.5, dur = 1, vol = 2 } The function is called with a single argument, a table containing the named arguments. The call to an instrument function returns the instrument function itself. Hence intrument calls can be concatenated: sine{ freq = 'f6', start = 0, dur = 1, vol = 2 } { freq = 'f5', start = 1, dur = 1, vol = 2 } { freq = 'f4', start = 0.5, dur = 1, vol = 2 } Required parameters The generated score uses the syntax of Csound\u00b4s standard numeric score. The required parameters of each intrument or note statement are the starting time and the duration time. These are given by the start and the dur entries of the table the instrument function is called with. Carry of function arguments Function arguments are carried from call to call per instrument function to the effect that you don\u2019t have to repeat this arguments in each call. The following would create an equivalent score to the example above: sine{ freq = 'f6', start = 0, dur = 1, vol = 2 } { freq = 'f5', start = 1 } { freq = 'f4', start = 0.5 } Pitch You can use numbers for frequency parameters, such as freq = 880.2 . A converter from note names to numeric frequencies is built in, using standard twelve-tone equal temperament tuning. As shown above, the note f5 converts to the frequency of an f above the 440 Hz a , approximately 698.456 Hz. Sharp and flat notes are specified using # or b as you might expect, for example f#5 or gb5 . Generating the output Output is generated as a string by the output method: local output = csd:output() You can feed that via standard output directly into the csound command, save it to a file or do some further processing.","title":"Manual"},{"location":"manual/#manual","text":"","title":"Manual"},{"location":"manual/#loading-the-module","text":"The module is loaded with require 'luacsound' as usual. This returns a function that provides the functionality to generate a new Csound definition file (`.csd) including a new score. By calling this function multiple times, several scores can be generated \"in parallel\".","title":"Loading the module"},{"location":"manual/#generating-a-new-csound-definition-file","text":"As said above, call the function provided by the module: local csound = require 'luacsound' local csd = csound() Of course, this can be accomplished in one line: local csd = require 'luacsound'() What you get is an object (called \"the Csd-object\" here) providing the functionality to load instruments an outputting the score. Instruments are loaded by the instr method and can be used to fill the score (see later), the output is generated by the output method.","title":"Generating a new Csound definition file"},{"location":"manual/#loading-instruments","text":"Instruments are loaded into the Csd-object by calling the instr method: local sine = csd:instr( 'sine' ) Calling instr loads the definition of the instrument from the .orc file with the given name, sine.orc in this example ( .orc is the extension Csound traditionally uses for instrument definitions). The method returns a function that can be used to fill the score of the Csd-object with notes.","title":"Loading instruments"},{"location":"manual/#instrument-files","text":"Defining instruments is done one instrument per file, which is quite pratical for purposes of re-use. Starting the instument block with instr and ending it with endin is ommitted. Instead of writing instr 3 ; p3=duration of note k1 linen p4, p6, p3, p7 ; p4=amp a1 oscil k1, p5, 1 ; p5=freq out a1 ; p6=attack time endin ; p7=release time and documenting the parameters, named parameters are used. Instruments are numbered automatically when loaded. The example above becomes k1 linen $amp, $attack, $dur, $release a1 oscil k1, $freq, 1 out a1","title":"Instrument files"},{"location":"manual/#using-instruments","text":"Using loaded instruments is easy. Simply call the associated functions, providing suitable parameters: sine{ freq = 'f6', start = 0, dur = 1, vol = 2 } sine{ freq = 'f5', start = 1, dur = 1, vol = 2 } sine{ freq = 'f4', start = 0.5, dur = 1, vol = 2 } The function is called with a single argument, a table containing the named arguments. The call to an instrument function returns the instrument function itself. Hence intrument calls can be concatenated: sine{ freq = 'f6', start = 0, dur = 1, vol = 2 } { freq = 'f5', start = 1, dur = 1, vol = 2 } { freq = 'f4', start = 0.5, dur = 1, vol = 2 }","title":"Using instruments"},{"location":"manual/#required-parameters","text":"The generated score uses the syntax of Csound\u00b4s standard numeric score. The required parameters of each intrument or note statement are the starting time and the duration time. These are given by the start and the dur entries of the table the instrument function is called with.","title":"Required parameters"},{"location":"manual/#carry-of-function-arguments","text":"Function arguments are carried from call to call per instrument function to the effect that you don\u2019t have to repeat this arguments in each call. The following would create an equivalent score to the example above: sine{ freq = 'f6', start = 0, dur = 1, vol = 2 } { freq = 'f5', start = 1 } { freq = 'f4', start = 0.5 }","title":"Carry of function arguments"},{"location":"manual/#pitch","text":"You can use numbers for frequency parameters, such as freq = 880.2 . A converter from note names to numeric frequencies is built in, using standard twelve-tone equal temperament tuning. As shown above, the note f5 converts to the frequency of an f above the 440 Hz a , approximately 698.456 Hz. Sharp and flat notes are specified using # or b as you might expect, for example f#5 or gb5 .","title":"Pitch"},{"location":"manual/#generating-the-output","text":"Output is generated as a string by the output method: local output = csd:output() You can feed that via standard output directly into the csound command, save it to a file or do some further processing.","title":"Generating the output"}]}